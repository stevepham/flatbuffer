// automatically generated by the FlatBuffers compiler, do not modify

package com.ht117.flatbuffer.model

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class Address : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Address {
        __init(_i, _bb)
        return this
    }
    val street : String?
        get() {
            val o = __offset(4)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val streetAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun streetInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val district : String?
        get() {
            val o = __offset(6)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val districtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun districtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    val city : String?
        get() {
            val o = __offset(8)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val cityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun cityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_1_12_0()
        fun getRootAsAddress(_bb: ByteBuffer): Address = getRootAsAddress(_bb, Address())
        fun getRootAsAddress(_bb: ByteBuffer, obj: Address): Address {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createAddress(builder: FlatBufferBuilder, streetOffset: Int, districtOffset: Int, cityOffset: Int) : Int {
            builder.startTable(3)
            addCity(builder, cityOffset)
            addDistrict(builder, districtOffset)
            addStreet(builder, streetOffset)
            return endAddress(builder)
        }
        fun startAddress(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addStreet(builder: FlatBufferBuilder, street: Int) = builder.addOffset(0, street, 0)
        fun addDistrict(builder: FlatBufferBuilder, district: Int) = builder.addOffset(1, district, 0)
        fun addCity(builder: FlatBufferBuilder, city: Int) = builder.addOffset(2, city, 0)
        fun endAddress(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
